/*  Java code generated by apiwrapper for GAMS Version 30.1.0
 *
 * GAMS - Loading mechanism for GAMS Expert-Level APIs
 *
 * Copyright (c) 2016-2020 GAMS Software GmbH <support@gams.com>
 * Copyright (c) 2016-2020 GAMS Development Corp. <support@gams.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.gams.api;

import java.io.File;

public class dctm {
   public static final int dctunknownSymType = 0; /* dcttypes */
   public static final int dctfuncSymType    = 1;
   public static final int dctsetSymType     = 2;
   public static final int dctacrSymType     = 3;
   public static final int dctparmSymType    = 4;
   public static final int dctvarSymType     = 5;
   public static final int dcteqnSymType     = 6;
   public static final int dctaliasSymType   = 127;

   private long dctPtr = 0;
   public native static int    GetReady (String[] msg);
   public native static int    GetReadyD(String dirName, String[] msg);
   public native static int    GetReadyL(String libName, String[] msg);
   public native int    Create   (String[] msg);
   public native int    CreateD  (String dirName, String[] msg);
   public native int    CreateDD (String dirName, String[] msg);
   public native int    CreateL  (String libName, String[] msg);
   public native int    Free     ();
   public native int    LoadEx(String fName, String []Msg);
   public native int    LoadWithHandle(long gdxptr, String []Msg);
   public native int    NUels();
   public native int    UelIndex(String uelLabel);
   public native int    UelLabel(int uelIndex, char []q, String []uelLabel);
   public native int    NLSyms();
   public native int    SymDim(int symIndex);
   public native int    SymIndex(String symName);
   public native int    SymName(int symIndex, String []symName);
   public native int    SymText(int symIndex, char []q, String []symTxt);
   public native int    SymType(int symIndex);
   public native int    SymUserInfo(int symIndex);
   public native int    SymEntries(int symIndex);
   public native int    SymOffset(int symIndex);
   public native int    SymDomNames(int symIndex, String []symDoms, int []symDim);
   public native int    SymDomIdx(int symIndex, int []symDomIdx, int []symDim);
   public native int    DomNameCount();
   public native int    DomName(int domIndex, String []domName);
   public native int    ColIndex(int symIndex, int []uelIndices);
   public native int    RowIndex(int symIndex, int []uelIndices);
   public native int    ColUels(int j, int []symIndex, int []uelIndices, int []symDim);
   public native int    RowUels(int i, int []symIndex, int []uelIndices, int []symDim);
   public native long    FindFirstRowCol(int symIndex, int []uelIndices, int []rcIndex);
   public native int    FindNextRowCol(long findHandle, int []rcIndex);
   public native void    FindClose(long findHandle);
   public native double    MemUsed();
   public native void    SetBasicCounts(int NRows, int NCols, int NBlocks);
   public native boolean    SetBasicCountsEx(int NRows, int NCols, long NBlocks, String []Msg);
   public native void    AddUel(String uelLabel, char q);
   public native void    AddSymbol(String symName, int symTyp, int symDim, int userInfo, String symTxt);
   public native void    AddSymbolData(int []uelIndices);
   public native boolean    AddSymbolDoms(String symName, String []symDoms, int symDim, String []Msg);
   public native void    WriteGDX(String fName, String []Msg);
   public native void    WriteGDXWithHandle(long gdxptr, String []Msg);
   public native int    NRows();
   public native int    NCols();
   public native int    LrgDim();
   public        long    GetdctPtr(){ return dctPtr;}
   public dctm () { }
   public dctm (long dctPtr) {
      this.dctPtr = dctPtr;
   }
   static {
      String stem = "dctmjni";
      String bitsuffix = "";
 
      if ( System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 ||
           System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0 ) {
           bitsuffix = "64";
      }
 
      String os = System.getProperty("os.name").toLowerCase();
      String prefix = "";
      String suffix = "";
 
      if (os.indexOf("win") >=0) {
         suffix = ".dll";
      } else if (os.indexOf("mac") >= 0) {
          prefix = "lib";
          suffix = ".dylib";
      } else {
          prefix = "lib";
          suffix = ".so";
      }
 
      boolean loaded = false;
      try  {
           String libPath = System.getProperty("java.library.path");
           if (libPath != null) {
               for (String str : libPath.split(System.getProperty("path.separator")) ) {
                   File curPath = new File(str);
                   String fileName = curPath.getCanonicalPath() + File.separator + prefix + stem + bitsuffix + suffix;
                   if ( new File(fileName).exists() ) {
                       System.load(fileName);
                       loaded = true;
                       break;
                   }
                }
            }
       } catch (Exception e) {
           loaded = false;
       } catch (UnsatisfiedLinkError e1) {
           loaded = false;
       } finally {
            if (!loaded) {
                try  {
                   System.loadLibrary(stem + bitsuffix);
                } catch (UnsatisfiedLinkError e1) {
                    String libraryFullPath = null;
                    String classPath = null;
                    try {
                       String packageName = (Class.forName(dctm.class.getName()).getPackage().getName());
                       StringBuilder sb = new StringBuilder();
                       String[] bs = packageName.split("\\.");
                       for (String s : bs) {
                          sb.append(s);
                          sb.append("/");
                        }
                       sb.append(dctm.class.getSimpleName());
                       sb.append(".class");
                       ClassLoader cl = dctm.class.getClassLoader();
 
                       classPath = cl.getResource(sb.toString()).getPath();
                       sb.insert(0, "/");
                       classPath = classPath.substring(0, classPath.lastIndexOf(sb.toString()));
                       if (classPath.endsWith("!")) {
                          int index = classPath.lastIndexOf("/");
                          if (index >= 0)
                              classPath = classPath.substring(0, index);
                        }
                       if (classPath.indexOf("/") >= 0) {
                           classPath = classPath.substring(classPath.indexOf(":")+1,classPath.length());
                       }
 
                       libraryFullPath = classPath + "/" + prefix + stem + bitsuffix + suffix ;
                       java.io.File apath = new java.io.File(libraryFullPath);
                       libraryFullPath = java.net.URLDecoder.decode(apath.getAbsolutePath(), "UTF-8");
                    } catch (Exception e2) {
                          e2.printStackTrace();
                          e1.printStackTrace();
                          throw (e1);
                    } finally {
                         if (libraryFullPath == null)  {
                            e1.printStackTrace();
                            throw (e1);
                         }
                    }
 
                    try {
                        System.load(libraryFullPath);
                    } catch (UnsatisfiedLinkError e3) {
                        e3.printStackTrace();
                        throw (e3);
                    }
               }
           }
        }
     }
}
