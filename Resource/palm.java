/*  Java code generated by apiwrapper for GAMS Version 30.1.0
 *
 * GAMS - Loading mechanism for GAMS Expert-Level APIs
 *
 * Copyright (c) 2016-2020 GAMS Software GmbH <support@gams.com>
 * Copyright (c) 2016-2020 GAMS Development Corp. <support@gams.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.gams.api;

import java.io.File;

public class palm {
   public static final int palLDemo       = 2000; /* palModelSizeLimits */
   public static final int palNLDemo      = 1000;
   public static final int palLCommunity  = 5000;
   public static final int palNLCommunity = 2500;

   private long palPtr = 0;
   public native static int    GetReady (String[] msg);
   public native static int    GetReadyD(String dirName, String[] msg);
   public native static int    GetReadyL(String libName, String[] msg);
   public native int    Create   (String[] msg);
   public native int    CreateD  (String dirName, String[] msg);
   public native int    CreateL  (String libName, String[] msg);
   public native int    Free     ();
   public native void    SetAuditLine(String auditline);
   public native boolean    AuditRun();
   public native int    GetVer();
   public native int    GetJul();
   public native boolean    IsBeta();
   public native boolean    IsAlfa();
   public native int    GetToday();
   public native int    GetJulianDays(String s);
   public native void    AuditFields(String auditline, String []v1, String []v2, String []v3);
   public native boolean    LicenseReadU(String filename, String []msg, int []rc);
   public native void    LicenseRegisterGAMS(int linenr, String liceline);
   public native void    LicenseRegisterGAMSDone();
   public native void    LicenseRegisterSystem(int numcodes, String codes, int magicnum);
   public native boolean    LicenseValidation();
   public native boolean    LicenseSolverCheck(String codes);
   public native boolean    LicenseSolverCheckSizes(String codes, int M, int N, int NZ, int NLNZ, int NDisc);
   public native boolean    LicenseCheck(int M, int N, int NZ, int NLNZ, int NDisc);
   public native boolean    LicenseGetMessage(String []msg);
   public native boolean    PrintDemoMessage(String []msg);
   public native boolean    LicenseIsGAMSCheckout();
   public native boolean    LicenseIsAcademic();
   public native boolean    LicenseCheckSubSys(String codes);
   public native boolean    LicenseCheckSubX(String sname, String codes, int []daysLeft);
   public native int    LicenseLevel();
   public native void    LicenseLevelSet(int x);
   private native String    GetAuditLine(String []sst_result);
   public String    GetAuditLine() {
       String[] sst_result = new String[1];
       return    GetAuditLine(sst_result);
   }
   private native String    GetCpr(String []sst_result);
   public String    GetCpr() {
       String[] sst_result = new String[1];
       return    GetCpr(sst_result);
   }
   private native String    GetRel(String []sst_result);
   public String    GetRel() {
       String[] sst_result = new String[1];
       return    GetRel(sst_result);
   }
   private native String    GetGold(String []sst_result);
   public String    GetGold() {
       String[] sst_result = new String[1];
       return    GetGold(sst_result);
   }
   private native String    GetCod(String []sst_result);
   public String    GetCod() {
       String[] sst_result = new String[1];
       return    GetCod(sst_result);
   }
   private native String    GetHdr(String []sst_result);
   public String    GetHdr() {
       String[] sst_result = new String[1];
       return    GetHdr(sst_result);
   }
   private native String    GetLicDat(String []sst_result);
   public String    GetLicDat() {
       String[] sst_result = new String[1];
       return    GetLicDat(sst_result);
   }
   private native String    GetBldCod(String []sst_result);
   public String    GetBldCod() {
       String[] sst_result = new String[1];
       return    GetBldCod(sst_result);
   }
   private native String    GetRelDat(String []sst_result);
   public String    GetRelDat() {
       String[] sst_result = new String[1];
       return    GetRelDat(sst_result);
   }
   private native String    GetRevision(String []sst_result);
   public String    GetRevision() {
       String[] sst_result = new String[1];
       return    GetRevision(sst_result);
   }
   private native String    GetShortAuditLine(String []sst_result);
   public String    GetShortAuditLine() {
       String[] sst_result = new String[1];
       return    GetShortAuditLine(sst_result);
   }
   private native String    LicenseGetLLine(int linenr, String []sst_result);
   public String    LicenseGetLLine(int linenr) {
       String[] sst_result = new String[1];
       return    LicenseGetLLine(linenr, sst_result);
   }
   private native String    LicenseGetPlatform(String []sst_result);
   public String    LicenseGetPlatform() {
       String[] sst_result = new String[1];
       return    LicenseGetPlatform(sst_result);
   }
   public        long    GetpalPtr(){ return palPtr;}
   public palm () { }
   public palm (long palPtr) {
      this.palPtr = palPtr;
   }
   static {
      String stem = "palmjni";
      String bitsuffix = "";
 
      if ( System.getProperty("os.arch").toLowerCase().indexOf("64") >= 0 ||
           System.getProperty("os.arch").toLowerCase().indexOf("sparcv9") >= 0 ) {
           bitsuffix = "64";
      }
 
      String os = System.getProperty("os.name").toLowerCase();
      String prefix = "";
      String suffix = "";
 
      if (os.indexOf("win") >=0) {
         suffix = ".dll";
      } else if (os.indexOf("mac") >= 0) {
          prefix = "lib";
          suffix = ".dylib";
      } else {
          prefix = "lib";
          suffix = ".so";
      }
 
      boolean loaded = false;
      try  {
           String libPath = System.getProperty("java.library.path");
           if (libPath != null) {
               for (String str : libPath.split(System.getProperty("path.separator")) ) {
                   File curPath = new File(str);
                   String fileName = curPath.getCanonicalPath() + File.separator + prefix + stem + bitsuffix + suffix;
                   if ( new File(fileName).exists() ) {
                       System.load(fileName);
                       loaded = true;
                       break;
                   }
                }
            }
       } catch (Exception e) {
           loaded = false;
       } catch (UnsatisfiedLinkError e1) {
           loaded = false;
       } finally {
            if (!loaded) {
                try  {
                   System.loadLibrary(stem + bitsuffix);
                } catch (UnsatisfiedLinkError e1) {
                    String libraryFullPath = null;
                    String classPath = null;
                    try {
                       String packageName = (Class.forName(palm.class.getName()).getPackage().getName());
                       StringBuilder sb = new StringBuilder();
                       String[] bs = packageName.split("\\.");
                       for (String s : bs) {
                          sb.append(s);
                          sb.append("/");
                        }
                       sb.append(palm.class.getSimpleName());
                       sb.append(".class");
                       ClassLoader cl = palm.class.getClassLoader();
 
                       classPath = cl.getResource(sb.toString()).getPath();
                       sb.insert(0, "/");
                       classPath = classPath.substring(0, classPath.lastIndexOf(sb.toString()));
                       if (classPath.endsWith("!")) {
                          int index = classPath.lastIndexOf("/");
                          if (index >= 0)
                              classPath = classPath.substring(0, index);
                        }
                       if (classPath.indexOf("/") >= 0) {
                           classPath = classPath.substring(classPath.indexOf(":")+1,classPath.length());
                       }
 
                       libraryFullPath = classPath + "/" + prefix + stem + bitsuffix + suffix ;
                       java.io.File apath = new java.io.File(libraryFullPath);
                       libraryFullPath = java.net.URLDecoder.decode(apath.getAbsolutePath(), "UTF-8");
                    } catch (Exception e2) {
                          e2.printStackTrace();
                          e1.printStackTrace();
                          throw (e1);
                    } finally {
                         if (libraryFullPath == null)  {
                            e1.printStackTrace();
                            throw (e1);
                         }
                    }
 
                    try {
                        System.load(libraryFullPath);
                    } catch (UnsatisfiedLinkError e3) {
                        e3.printStackTrace();
                        throw (e3);
                    }
               }
           }
        }
     }
}
